# frozen_string_literal: true
#
<%= license.map { |x| "# #{x.chomp} " }.join "\n" %>

require "fisk/encoding"

class Fisk
  module Instructions
    Operand     = Struct.new(:type, :input, :output) do
      def immediate?; false; end
    end

    class Immediate < Operand
      attr_reader :size

      def initialize type, input, output, size
        super(type, input, output)
        @size = size
      end

      def immediate?; true; end
    end

    Form        = Struct.new(:operands, :encodings)
    Instruction = Struct.new(:name, :forms) do
      def check_performance(operands)
        case name
        when Instructions::MOV.name
          if operands[0].register? && operands[1].register? && operands[0].name == operands[1].name
            return "MOV with same register (#{operands[0].name})"
          end
        end
      end

      def optimize(operands, default_insn)
        default_insn
      end
    end

    OPERAND_TYPES = [
<%-
  unique_operands.each do |u_op|
    if u_op[0] =~ /^imm(\d+)$/
      size = $1.to_i
-%>
      Immediate.new(<%= u_op[0].dump %>, <%= u_op[1] || "nil" %>, <%= u_op[2] || "nil" %>, <%= size %>),
<%- else -%>
      Operand.new(<%= u_op[0].dump %>, <%= u_op[1] || "nil" %>, <%= u_op[2] || "nil" %>),
<%- end -%>
<%- end -%>
    ]

    def self.instruction_names
      constants - [:Operand, :OPERAND_TYPES]
    end
<%-
  doc.root.children.each do |instruction|
    next unless instruction.name == "Instruction"
    name = instruction["name"]
-%>
    autoload :<%= name %>, "fisk/instructions/<%= name.downcase %>"
<%-
  end
-%>
    module DSLMethods
<%-
  doc.root.children.each do |instruction|
    next unless instruction.name == "Instruction"
    name = instruction["name"]
-%>
      def <%= name.downcase %>(*params)
        gen_with_insn Fisk::Instructions::<%= name %>, params
      end
<%-
  end
-%>
    end
  end
end
